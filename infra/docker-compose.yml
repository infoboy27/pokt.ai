version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    # PostgreSQL port only exposed in development
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pokt_ai"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend
      # AÃ±ade 'lb' solo si vas a publicar Postgres por Traefik TCP (:15432)
      # - lb

  redis:
    image: redis:7-alpine
    env_file:
      - .env
    # Redis port only exposed in development
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend
    # Add security configuration
    command: redis-server --requirepass ${REDIS_PASSWORD} --bind 0.0.0.0

  api:
    build:
      context: ..
      dockerfile: apps/api/Dockerfile
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      PORT: 3001
      HOST: 0.0.0.0
    # API service port only exposed in development
    ports:
      - "${API_PORT:-3001}:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    # volumes:
    #   - ../apps/api:/app
    #   - /app/node_modules
    # Asegura que Nest/Express escuche en 0.0.0.0:3001
    # command: sh -lc "npm run start:dev"
    networks:
      - backend
      - lb
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.poktai-api.rule=Host(`pokt.ai`) && PathPrefix(`/api`)"
      - "traefik.http.routers.poktai-api.entrypoints=websecure"
      - "traefik.http.routers.poktai-api.tls=true"
      - "traefik.http.services.poktai-api.loadbalancer.server.port=3001"
      - "traefik.http.middlewares.poktai-api-strip.stripprefix.prefixes=/api"
      - "traefik.http.routers.poktai-api.middlewares=poktai-api-strip"

  web:
    build:
      context: ..
      dockerfile: apps/web/Dockerfile
    env_file:
      - .env
    environment:
      # Use Docker service name for API connection
      NEXT_PUBLIC_API_URL: http://api:3001/api
      AUTH0_BASE_URL: https://pokt.ai
      PORT: 4000
      HOST: 0.0.0.0
    # Web service port only exposed in development
    ports:
      - "${WEB_PORT:-3005}:4000"
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    volumes:
      - ../apps/web:/app/apps/web
      - /app/apps/web/node_modules
      - /app/apps/web/.next
    # Forzamos Next a escuchar en 0.0.0.0:4000
    # command: sh -lc "next dev -p ${PORT:-4000} -H ${HOST:-0.0.0.0}"
    networks:
      - backend
      - lb
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.poktai-web.rule=Host(`pokt.ai`)"
      - "traefik.http.routers.poktai-web.entrypoints=websecure"
      - "traefik.http.routers.poktai-web.tls=true"
      - "traefik.http.services.poktai-web.loadbalancer.server.port=4000"
      - "traefik.http.routers.poktai-web.priority=1"

  # Quita nginx si Traefik ya ocupa 80/443
  # nginx:
  #   image: nginx:alpine
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     - web
  #     - api
  #   profiles:
  #     - production

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@pokt.ai
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

networks:
  lb:
    external: true
  backend:
    name: poktai_backend
    driver: bridge

