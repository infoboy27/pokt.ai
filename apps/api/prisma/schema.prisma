// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin Users (Portal Administrators)
model AdminUser {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      String   @default("admin") // owner, admin, viewer
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("admin_users")
}

// Customer Organizations (existing structure preserved)
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  auth0Sub  String   @unique @map("auth0_sub")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  orgMemberships OrgMember[]
  ownedOrgs      Organization[] @relation("OrgOwner")

  @@map("users")
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  ownerId   String   @map("owner_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  owner     User        @relation("OrgOwner", fields: [ownerId], references: [id])
  members   OrgMember[]
  endpoints Endpoint[]
  invoices  Invoice[]

  @@map("organizations")
}

model OrgMember {
  id       String @id @default(cuid())
  orgId    String @map("org_id")
  userId   String @map("user_id")
  role     String // ADMIN, ORG_OWNER, DEV
  joinedAt DateTime @default(now()) @map("joined_at")

  // Relations
  org  Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([orgId, userId])
  @@map("org_members")
}

// Portal Admin Models
model Endpoint {
  id            String   @id @default(cuid())
  name          String   @unique
  baseUrl       String   @map("base_url")
  healthUrl     String   @map("health_url")
  description   String?
  isActive      Boolean  @default(true) @map("is_active")
  orgId         String?  @map("org_id") // Optional for admin-managed endpoints
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  org           Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade)
  networks      Network[]
  apiKeys       ApiKey[]
  healthChecks  HealthCheck[]

  @@map("endpoints")
}

model Network {
  id         String   @id @default(cuid())
  code       String   // e.g., "eth", "bsc"
  chainId    Int?     @map("chain_id")
  rpcUrl     String   @map("rpc_url")
  wsUrl      String?  @map("ws_url")
  isTestnet  Boolean  @default(false) @map("is_testnet")
  isEnabled  Boolean  @default(true) @map("is_enabled")
  endpointId String   @map("endpoint_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  endpoint Endpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade)
  usages   Usage[]

  @@index([endpointId, code], name: "idx_network_endpoint_code")
  @@map("networks")
}

model ApiKey {
  id         String   @id @default(cuid())
  label      String
  keyHash    String   @unique @map("key_hash") // store hash only
  headerName String   @default("X-API-Key") @map("header_name")
  rpsLimit   Int      @default(100) @map("rps_limit")
  rpdLimit   Int      @default(1000000) @map("rpd_limit")
  rpmLimit   Int      @default(30000000) @map("rpm_limit")
  isActive   Boolean  @default(true) @map("is_active")
  endpointId String   @map("endpoint_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  endpoint Endpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade)
  usages   Usage[]

  @@map("api_keys")
}

model Usage {
  id         String   @id @default(cuid())
  apiKeyId   String   @map("api_key_id")
  networkId  String?  @map("network_id")
  tsMinute   DateTime @map("ts_minute") // minute bucket
  count      Int      @default(0)
  latencyP50 Float?   @map("latency_p50") // ms
  latencyP95 Float?   @map("latency_p95")
  errorRate  Float?   @map("error_rate") // 0..1
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  apiKey  ApiKey   @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  network Network? @relation(fields: [networkId], references: [id])

  @@unique([apiKeyId, tsMinute])
  @@index([apiKeyId, networkId, tsMinute])
  @@map("usage")
}

model HealthCheck {
  id         String   @id @default(cuid())
  endpointId String   @map("endpoint_id")
  ok         Boolean
  httpStatus Int?     @map("http_status")
  latencyMs  Int?     @map("latency_ms")
  checkedAt  DateTime @default(now()) @map("checked_at")
  meta       Json?

  // Relations
  endpoint Endpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade)

  @@index([endpointId, checkedAt])
  @@map("health_checks")
}

// Legacy models (preserved for backward compatibility)
model UsageDaily {
  id         String   @id @default(cuid())
  endpointId String   @map("endpoint_id")
  date       DateTime
  relays     Int
  p95ms      Int      @map("p95_ms")
  errorRate  Float    @map("error_rate")
  createdAt  DateTime @default(now()) @map("created_at")

  @@unique([endpointId, date])
  @@map("usage_daily")
}

model Invoice {
  id               String   @id @default(cuid())
  orgId            String   @map("org_id")
  stripeInvoiceId  String   @unique @map("stripe_invoice_id")
  periodStart      DateTime @map("period_start")
  periodEnd        DateTime @map("period_end")
  amount           Int      // Amount in cents
  status           String   // draft, open, paid, void, uncollectible
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  org Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@map("invoices")
}
